# -*- coding: utf-8 -*-
"""Women_safety_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K_F8i32RsIjopzbD8eXuhkIuXci1zHvQ
"""

from keras.api._v2.keras import activations
import tensorflow as tf
import pandas as pd
import numpy as np
from tensorflow import keras
import matplotlib.pyplot as plt
import pickle
from sklearn.model_selection import train_test_split
from keras.preprocessing.text import Tokenizer
from keras.layers import Conv1D, MaxPooling1D, Embedding
from keras.utils import pad_sequences
from keras.layers import Dense, Input, GlobalMaxPooling1D
from keras.models import Model

df=pd.read_csv('women_safety_dataset.csv',error_bad_lines=False,encoding='ISO-8859-1')

Y=df['Category'].values

df_train,df_test,Ytrain,Ytest=train_test_split(df['Message'],Y,test_size=0.33)

MAX_VOCAB_SIZE=20000
tokenizer=Tokenizer(num_words=MAX_VOCAB_SIZE)
tokenizer.fit_on_texts(df_train)
sequences_train=tokenizer.texts_to_sequences(df_train)
sequences_test=tokenizer.texts_to_sequences(df_test)

word2idx=tokenizer.word_index
V=len(word2idx)

data_train=pad_sequences(sequences_train)
T=data_train.shape[1]
data_test=pad_sequences(sequences_test,maxlen=T)

from keras.api._v2.keras import activations
D=20
i=Input(shape=(T,))
x=Embedding(V+1,D)(i)
x=Conv1D(32,2,activation='relu')(x)
x=MaxPooling1D(2)(x)
x=Conv1D(64,2,activation='relu')(x)
x=MaxPooling1D(2)(x)
x=Conv1D(128,2,activation='relu')(x)
x=GlobalMaxPooling1D()(x)
x=Dense(1,activation='sigmoid')(x)
model=Model(i,x)

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

r=model.fit(data_train,Ytrain,epochs=20,validation_data=(data_test,Ytest))

import matplotlib.pyplot as plt
plt.plot(r.history['loss'],label='loss')
plt.plot(r.history['val_loss'],label='val_loss')
plt.legend()

plt.plot(r.history['accuracy'],label='test_accuracy')
plt.plot(r.history['val_accuracy'],label=['val_accuracy'])
plt.legend()

pickle.dump(model, open('model.pkl', 'wb'))
model = pickle.load(open('model.pkl', 'rb'))
